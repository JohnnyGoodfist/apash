#!/usr/bin/env bash
# shellcheck disable=SC1090
apash.import(){
  local lib
  local libs=()
  local forceFlag=false
  local location=""
  local APASH_BASH_DIR="$APASH_HOME_DIR/src/bash"
  [ "$1" = "-f" ] && forceFlag=true && shift

  for l in "$@"; do
    location="$APASH_BASH_DIR/"${l//./\/}
    # Import package
    if [ -d "$location" ]; then
      for lib in "$location"/*.sh; do
        libs+=("$lib")
      done
    
    # Import a single class or method
    elif [ -r "${location}.sh" ]; then
      libs+=("$location.sh")

    # Import a file terminating by .sh
    elif [ -r "${location//\/sh/}.sh" ]; then
      libs+=("${location//\/sh/}.sh")
    
    # Check if raw value is a package
    elif [ -d "$l" ]; then
      location="$l"
      for lib in "$location"/*.sh; do
        libs+=("$lib")
      done

    # Check if relative raw value is a package
    elif [ -d "$APASH_BASH_DIR/$l" ]; then
      location="$APASH_BASH_DIR/$l"
      for lib in "$location"/*.sh; do
        libs+=("$lib")
      done
    
    # Check if relative raw value is a script
    elif [ -f "$APASH_BASH_DIR/$l" ]; then
      libs+=("$APASH_BASH_DIR/$l")

    # Import the raw file path
    elif [ -r "$l" ]; then
      libs+=("$l")
    
    # The library connot be imported
    else
      echo "WARNING: Unknown library: '$l' - '$location'" >&2
      continue
    fi
  done

  for lib in "${libs[@]}"; do
    [ ! -r "$lib" ] && echo "WARNING: non readable library: $lib" >&2 && continue
    if [[ $forceFlag = true ]]; then source "$lib"; continue; fi

    if [[ "$APASH_SHELL" == "bash" ]] && ! declare -F "$(basename "$(dirname "$lib")").$(basename "${lib%.*}")"; then
      source "$lib"
    elif [[ "$APASH_SHELL" == "zsh"  ]] && ! type -f "$(basename "$(dirname "$lib")").$(basename "${lib%.*}")" > /dev/null 2>&1; then
      source "$lib"
    fi
  done
}

if [[ "$APASH_SHELL" == "bash" ]]; then
  export -f apash.import
elif [[ "$APASH_SHELL" == "zsh"  ]] && ! typeset -f apash.import > /dev/null; then
  # FPATH+="${0:A:h}"
  autoload -Uz apash.import
fi
