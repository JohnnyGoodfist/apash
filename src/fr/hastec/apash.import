#!/usr/bin/env bash
# shellcheck disable=SC1090

##/
# @name apash.import
# @brief Import a source to the current session.
# @description
#   Source can be imported individually or per package.
#   It accepts the . or / separators.
#   Intermediate packages must not have dots in the name ".".
#
# ## Implementation Notes
#   Below how the methods are resolved according to the file name.
#   The leaf files correspond to Methods. Their names must:
#   - Indicate which shell is concerned by the script (.sh: default, .zsh, .bash...)
#   - Indicate a version relative to the shell if necessary. The version is separated by an underscore and numbers separated by dots.
#   Example:
#   ```bash
#   lowerCase.sh          # Default script picked up by the import when no shell or version match.
#   lowerCase.bash        # Pick this file when the APASH_SHELL is bash.
#   lowerCase.bash_4.2.53 # Pick this file when the APASH_SHELL is bash and 
#                         # APASH_SHELL_VERSION lower than 4.2.53.
#                         # NOT RECOMMANDED, because if a 4.2.54 is out, the file is not picked.
#   lowerCase.bash_4.2    # So prefer to avoid the last patch number in order to take patched versions into account (specially for latest version).
#   ```
#
# ## History
# @since 0.1.0 (hastec-fr)
#
# ## Interface
# @apashPackage
#
# ### Arguments
# | #      | varName        | Type          | in/out   | Default         | Description                          |
# |--------|----------------|---------------|----------|-----------------|--------------------------------------|
# | $@     | $@             | string...     | in       |                 | Name of element to import            |
#
# ### Options
# | option | description   |
# |--------|---------------|
# | -f     | Force the import of the element even it has been already imported (not recusive).|
#
# ### Example
# ```bash
#    apash.import fr.hastec.apash.commons-lang.ArrayUtils.clone       # Import the method ArrayUtils.clone.
#    apash.import -f fr.hastec.apash.commons-lang.ArrayUtils.clone    # Re-Import the method ArrayUtils.clone.
#
#    apash.import  fr/hastec/apash/commons-lang/ArrayUtils/add        # Import the method ArrayUtils.add.
#    apash.import  fr/hastec/apash/commons-lang/ArrayUtils/addAll.sh  # Import the method ArrayUtils.addAll.
#
#    apash.import fr.hastec.apash.util.Log                            # Import all methods under Log directory.
#
#    apash.import fr.hastec.apash.commons-lang.StringUtils.lowerCase \
#                 fr.hastec.apash.commons-lang.StringUtils.upperCase  # Import both methods upper/lower cases.
# ```
#
# @stdout None.
# @stderr None.
#
# @todo: Optimize a maximum this function to reduce loading time.
#/
apash.import(){
  local lib vlib version
  local libs=()
  local forceFlag=false
  local location=""
  local APASH_SRC_DIR="$APASH_HOME_DIR/src"
  local APASH_LIB_TO_IMPORT="${APASH_LIB_TO_IMPORT:-}"
  [ "$1" = "-f" ] && forceFlag=true && shift

  for l in "$@"; do
    location="$APASH_SRC_DIR/"${l//./\/}

    # Shortcut resolution if the function <package>.<method> already exists.
    [ "$forceFlag" = "false" ] && typeset -f "$(basename "$(dirname "$location")").$(basename "${location%.*}")" > /dev/null 2>&1 && continue

    # Import package
    if [ -d "$location" ]; then
      for lib in "$location"/*.sh; do
        libs+=("$lib")
      done
    
    # Import a single class or method
    elif [ -r "${location}.sh" ]; then
      libs+=("$location.sh")

    # Import a file terminating by .sh
    elif [ -r "${location//\/sh/}.sh" ]; then
      libs+=("${location//\/sh/}.sh")
    
    # Check if raw value is a package
    elif [ -d "$l" ]; then
      location="$l"
      for lib in "$location"/*.sh; do
        libs+=("$lib")
      done

    # Check if relative raw value is a package
    elif [ -d "$APASH_SRC_DIR/$l" ]; then
      location="$APASH_SRC_DIR/$l"
      for lib in "$location"/*.sh; do
        libs+=("$lib")
      done
    
    # Check if relative raw value is a script
    elif [ -f "$APASH_SRC_DIR/$l" ]; then
      libs+=("$APASH_SRC_DIR/$l")

    # Import the raw file path
    elif [ -r "$l" ]; then
      libs+=("$l")
    
    # The library connot be imported
    else
      echo "$(date +"%FT%T.%3N%z") [WARNING] apash.import ($LINENO): Unknown library: '$l' - '$location'" >&2
      continue
    fi
  done

  for lib in "${libs[@]}"; do
    # Change lib in case a variant exist for the current shell.
    [[ -f "${lib%.*}.$APASH_SHELL" ]] && lib="${lib%.*}.$APASH_SHELL"

    if [[ -e "${lib%.*}.${APASH_SHELL}_*" ]]; then
      # Overide the library whith a compatible version of the same shell
      for vlib in "${lib%.*}.${APASH_SHELL}_"*; do
        [ ! -r "$vlib" ] && continue
        version="${vlib#*_}"
        # Sort -V not present in zsh (so use manual numeric sort)
        if [[ "$(echo -e "$APASH_SHELL_VERSION\n$version" |sort -t. -k 1.2,1n -k 2,2n -k 3,3n | head -n1)" == "$APASH_SHELL_VERSION" ]]; then
          lib="$vlib" && break
        fi
      done
    fi

    [ ! -r "$lib" ] && echo "WARNING: non readable library: $lib" >&2 && continue
    if [[ $forceFlag == true ]]; then source "$lib"; continue; fi
    if ! typeset -f "$(basename "$(dirname "$lib")").$(basename "${lib%.*}")" > /dev/null 2>&1; then
      if [[ ! ":$APASH_LIB_TO_IMPORT:" =~ ":$lib:" ]]; then # cycling import protection
        APASH_LIB_TO_IMPORT+=":$lib:" 
        source "$lib"
        APASH_LIB_TO_IMPORT="${APASH_LIB_TO_IMPORT/:$APASH_LIB_TO_IMPORT:/}"
      fi
    fi
  done
}

if [[ "$APASH_SHELL" == "bash" ]]; then
  export -f apash.import
elif [[ "$APASH_SHELL" == "zsh"  ]] && [[ ! ":${FPATH}:" =~ :${0:A:h}:  ]]; then
  # Autoload the function for the current shell and subshell
  # But function is not export to subprocesses. Can only resource the file.
  FPATH+=":${0:A:h}"
  autoload -Uz apash.import
fi
