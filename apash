#!/usr/bin/env bash
export APASH_VERSION="0.1.0-snapshot"

# Command line counters
APASH_NB_ARGS=0

# Source must be done out of function
APASH_ACTION_SOURCE=false
APASH_ACTION_DOC=false
APASH_ACTION_TEST=false
APASH_ACTION_INIT=false
APASH_INIT_POST_INSTALL=false

APASH_EXIT_REQUIRED=false
APASH_IS_SOURCED=false
APASH_SHELL=""
APASH_HOME_DIR=""

# Helps ######################################################################
showApashHelp(){
  cat << EOF
  Usage: ${0##*/} [-h|--help] [--version] ACTION [ACTION_ARGS]

  Apash command line wrapping actions for enabling features, generating
  documentation or executing tests.
  
      -h|--help|-?      display this help and exit.
      --version         display the current version of apash and exit.

  ACTIONS:
      doc               Generate the documentation relative to apash.
                        Prerequisite: shdoc is avaiable.

      source            Source the apash root script for current shell.
                        Take care that this current script is sourced too.
      
      test              Execute the set of unitary tests.

  GETTING STARTED:
    First, source apash by using the source action or not passing any args:
        $ . apash       # Symbol "$" is the prompt and dot is important !
    
    Thereafter, libraries can be imported and used as following:
        $ apash.import fr.hastec.apash.commons-lang.StringUtils.indexOf
        $ StringUtils.indexOf "Gooood Morning" "M"
        # Result: 7
EOF
}

showApashSourceHelp(){
  cat << EOF
  Usage: ${0##*/} source [-h]

  Source the main root script. It implies that it reset the list of 
  libraries already sourced.
  
      -h|--help|-?      display this help and exit.

EOF
}

showApashTestHelp(){
  cat << EOF
  Usage: ${0##*/} test [-h]

  Execute unitary tests contained in the test directory.
  
      -h|--help|-?      display this help and exit.

  PREREQUISITES: Bats-Core must be installed.
  Example:
  # Install basher
  $ curl -s \
    "https://raw.githubusercontent.com/basherpm/basher/master/install.sh" \
    | bash
  
  # Install Bats
  $ basher install bats-core/bats-core

  # Open another terminal again to ensure that environment is well reloaded.
EOF
}

showApashDocHelp(){
  cat << EOF
  Usage: ${0##*/} doc [-h]

  Generate the documentation (in markdown format) based on the comments.
  
      -h|--help|-?      display this help and exit.

  PREREQUISITES: shdoc must be installed.
  Example:
  # Install basher
  $ curl -s \
    "https://raw.githubusercontent.com/basherpm/basher/master/install.sh" \
    | bash
  
  # Install shdoc
  $ basher install reconquest/shdoc

  # Open another terminal again to ensure that environment is well reloaded.
EOF
}

showApashInitHelp(){
  cat << EOF
  Usage: ${0##*/} init [-h] [--post-install]

  Add necessary line to startup script for apash usage
  
      -h|--help|-?      display this help and exit.
      --post-install    Add necessary lines in startup script

  Example:
  $ apash init --post-install
  Lines added to the startup up script \$HOME/.bashrc with tag apashInstallTag   
  Open another terminal again to ensure that environment is well reloaded.
EOF
}

# Parsing Arguments ##########################################################
# @see https://mywiki.wooledge.org/BashFAQ/035
parseApashArguments(){
  while :; do
    # Check if the argument is still an option
    case $1 in
      "-"*) ;;
        *) break ;;
    esac

    case $1 in
      # Show helps
      -h|-\?|--help)
        show_help
        APASH_EXIT_REQUIRED=true && return        
        ;;

      # Show the version of the scipts
      --version)
        echo "$APASH_VERSION"
        APASH_EXIT_REQUIRED=true && return
        ;;

      # End of all options.
      --)             
        shift && APASH_NB_ARGS=$(( APASH_NB_ARGS + 1 ))
        break
        ;;

      # Display error message on unknown option
      -?*)
        printf 'WARN: Unknown option: %s\n' "$1" >&2
        APASH_EXIT_REQUIRED=true && return
        ;;

      # Stop parsing
      *)               # Default case: No more options, so break out of the loop.
        break
    esac
    shift && APASH_NB_ARGS=$(( APASH_NB_ARGS + 1 ))
  done
}

parseApashSourceArgs() {
  while :; do

    case $1 in
      # Show helps
      -h|-\?|--help)
        showApashSourceHelp
        APASH_EXIT_REQUIRED=true && return
        ;;

      # End of all options.
      --)             
        shift
        break
        ;;

      # Display error message on unknown option
      -?*)
        printf 'WARN: Unknown option: %s\n' "$1" >&2
        APASH_EXIT_REQUIRED=true && return
        ;;

      # Stop parsing
      *)
        break
    esac
    shift
  done
}

parseApashTestArgs() {
  while :; do

    case $1 in
      # Show helps
      -h|-\?|--help)
        showApashTestHelp
        APASH_EXIT_REQUIRED=true && return
        ;;

      # End of all options.
      --)             
        shift
        break
        ;;

      # Display error message on unknown option
      -?*)
        printf 'WARN: Unknown option: %s\n' "$1" >&2
        APASH_EXIT_REQUIRED=true && return
        ;;

      # Stop parsing
      *)
        break
    esac
    shift
  done
}

parseApashDocArgs() {
  while :; do

    case $1 in
      # Show helps
      -h|-\?|--help)
        showApashDocHelp
        APASH_EXIT_REQUIRED=true && return
        ;;

      # End of all options.
      --)             
        shift
        break
        ;;

      # Display error message on unknown option
      -?*)
        printf 'WARN: Unknown option: %s\n' "$1" >&2
        APASH_EXIT_REQUIRED=true && return
        ;;

      # Stop parsing
      *)
        break
    esac
    shift
  done
}

parseApashInitArgs() {
  while :; do

    case $1 in
      # Show helps
      -h|-\?|--help)
        showApashInitHelp
        APASH_EXIT_REQUIRED=true && return
        ;;

      --post-install)
        APASH_INIT_POST_INSTALL=true
        ;;
      # End of all options.
      --)             
        shift
        break
        ;;

      # Display error message on unknown option
      -?*)
        printf 'WARN: Unknown option: %s\n' "$1" >&2
        APASH_EXIT_REQUIRED=true && return
        ;;

      # Stop parsing
      *)
        break
    esac
    shift
  done
}


parseApashAction(){
    case $1 in
      doc)
        APASH_ACTION_DOC=true
        shift
        parseApashDocArgs "$@"
        ;;

      init)
        APASH_ACTION_INIT=true
        shift
        parseApashInitArgs "$@"
        ;;

      source)
        APASH_ACTION_SOURCE=true
        shift
        parseApashSourceArgs "$@"
        ;;

      test)
        APASH_ACTION_TEST=true
        shift
        parseApashTestArgs "$@"
        ;;

      -?*)
        printf 'WARN: Unknown action: %s\n' "$1" >&2
        APASH_EXIT_REQUIRED=true && return
        ;;
    esac
}

# Add necessary instruction to startup script for apash usage.
executePostInstall(){  
  local startup_script=""
  local apash_keyword="apashInstallTag"
  case "$APASH_SHELL" in
    bash) startup_script="$HOME/.bashrc" ;;
    zsh)  startup_script="$HOME/.zshrc"  ;;
    sh)   startup_script="$HOME/.profile";;
    *)    startup_script="" ;   ;;
  esac

  [ ! -w "$startup_script" ] && echo "Startup Script cannot be edited: $startup_script" >&2 && return

  if ! grep -q "$apash_keyword" "$startup_script" ; then
    (
      echo "export APASH_HOME_DIR=\"$APASH_HOME_DIR\"   ##$apash_keyword"
      echo "export PATH=\"\$PATH:\$APASH_HOME_DIR\"    ##$apash_keyword"
      echo ". \"\$APASH_HOME_DIR/apash\"              ##$apash_keyword"
    ) >> "$startup_script"
  else
    echo "The apash install tags are already present in $startup_script."
  fi
}

# Execute apash command
# Embedded flow to prevent usage of exit statement
# which quit the current session in case of sourcing.
executeApashCommand(){
  # If the current shell is not identified, then exit.
  if [ "$APASH_SHELL" = "Unknown" ]; then
    echo "Not supported shell for the moment." >&2
    return
  fi

  # Source main apash script if no argument has been passed.
  # Take in consideration basher include (bash "hastec-fr/apash" "apash")
  if [ $# -eq 0 ] || { [ $APASH_IS_SOURCED = true ] && [ "$1" = "hastec-fr/apash" ] && [ "$2" = "apash" ] ;}; then
    # shellcheck disable=SC1091
    . "$APASH_HOME_DIR/src/bash/fr/hastec/apash.sh"
    [ "$APASH_IS_SOURCED" = "true" ] && return
  fi

  parseApashArguments "$@"
  shift "$APASH_NB_ARGS"
  [ "$APASH_EXIT_REQUIRED" = "true" ] && return

  parseApashAction "$@"
  shift
  [ "$APASH_EXIT_REQUIRED" = "true" ] && return

  # Use POSIX operation as much as possible.
  # Sourcing action must be done in main flow instead of function.
  if [ "$APASH_ACTION_SOURCE" = "true" ]; then
    # shellcheck disable=SC1091
    . "$APASH_HOME_DIR/src/bash/fr/hastec/apash.sh"

  elif [ "$APASH_ACTION_TEST" = "true" ]; then
    bats -T --print-output-on-failure -r test

  elif [ "$APASH_ACTION_INIT" = "true" ] && [ "$APASH_INIT_POST_INSTALL" = "true" ] ; then
    executePostInstall

  elif [ "$APASH_ACTION_DOC" = "true" ]; then
    ! declare -F "apash.import" > /dev/null && echo "Apash must be sourced first" >&2 && return
    apash.import "fr.hastec.apashDoc"
    apash.doc
  fi
}

# Main #######################################################################
##############################################################################
# Primary checks prefered in the main than
# embedeed in a function
##############################################################################
# Check if the script is being sourced
if [ "$0" = "${0##*/}" ]; then
  APASH_IS_SOURCED="true"
else
  APASH_IS_SOURCED="false"
fi

# If already set in env, then skip calculation
# Get the type of shell (only bash supported for the moment)
if [ -z "$APASH_SHELL" ];then
  APASH_SHELL=$(basename "$SHELL")
fi

# Calculate potential apash home directory if not determined.
if [ -z "$APASH_HOME_DIR" ]; then
  if [ "$APASH_SHELL" = "bash" ]; then
    APASH_HOME_DIR=$(dirname "$(realpath "$(command -v -- "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")")
  else
    APASH_HOME_DIR="$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )"
  fi
fi
export APASH_HOME_DIR

executeApashCommand "$@"
